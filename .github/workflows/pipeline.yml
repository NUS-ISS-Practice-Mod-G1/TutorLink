name: CI/CD Pipeline

on:
    pull_request:
        branches: [ main ]
    workflow_dispatch: # manual trigger allowed

jobs:
    # ----------------- FRONTEND -----------------
    frontend-build:
        name: Frontend - Build
        runs-on: ubuntu-latest
        environment: development
        defaults:
            run:
                working-directory: ./frontend/
        steps:
            - name: Checkout Frontend
              uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                node-version: 20

            - name: Cache node modules
              uses: actions/cache@v3
              with:
                path: frontend/node_modules
                key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
                restore-keys: |
                  ${{ runner.os }}-node-

            - name: Install dependencies
              run: npm ci

            - name: Create .env file
              run: echo "${{ secrets.FRONTEND_ENV_FILE }}" > .env

            - name: Build project
              run: npm run build

    frontend-test:
        name: Frontend - Test
        runs-on: ubuntu-latest
        needs: frontend-build
        defaults:
            run:
                working-directory: ./frontend/
        steps:
            - name: Checkout Frontend
              uses: actions/checkout@v4
            
            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                node-version: 20
                
            - name: Cache node modules
              uses: actions/cache@v3
              with:
                path: frontend/node_modules
                key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
                restore-keys: |
                  ${{ runner.os }}-node-
                    
            - name: Install dependencies (if cache missed)
              run: npm ci
                    
            - name: Run Tests
              run: npm test

    # ----------------- BACKEND -----------------
    backend-build:
        name: Backend - Build
        runs-on: ubuntu-latest
        environment: development
        defaults:
            run:
                working-directory: ./backend/
        steps:
            - name: Checkout Backend
              uses: actions/checkout@v4
            
            - name: Set up JDK
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin'
                java-version: 17
                cache: 'maven'   # <--- enables ~/.m2/repository caching
            
            - name: Create application.yml
              run: |
                mkdir -p src/main/resources
                echo "${{ secrets.BACKEND_APP_YML }}" > src/main/resources/application.yml
            
            - name: Build Backend (skip tests)
              run: mvn -B clean package -DskipTests

    backend-test:
        name: Backend - Test
        runs-on: ubuntu-latest
        needs: backend-build
        defaults:
            run:
                working-directory: ./backend/
        steps:
            - name: Checkout Backend
              uses: actions/checkout@v4
            
            - name: Set up JDK
              uses: actions/setup-java@v4
              with:
                distribution: 'temurin'
                java-version: 17
                cache: 'maven'
            
            - name: Run Tests
              run: mvn test
            
            - name: Generate Coverage
              run: mvn jacoco:report
            
            - uses: codecov/codecov-action@v5
              with:
                token: ${{ secrets.CODECOV_TOKEN }}
                files: backend/target/site/jacoco/jacoco.xml
                fail_ci_if_error: true
            
    # ----------------- SECURITY SCAN -----------------
    asp-scan-frontend:
        name: OWASP Scan - Frontend
        runs-on: ubuntu-latest
        needs: frontend-test
        steps:
            - uses: actions/checkout@v4
            
            - name: Run OWASP Dependency Check (Frontend)
              uses: dependency-check/Dependency-Check_Action@main
              with:
                project: 'frontend'
                path: './frontend'
                format: 'HTML'
                out: 'reports/frontend'
                
            - name: Upload OWASP Report (Frontend)
              uses: actions/upload-artifact@v4
              with:
                name: dependency-check-report-frontend
                path: reports/frontend
            
    asp-scan-backend:
        name: OWASP Scan - Backend
        runs-on: ubuntu-latest
        needs: backend-test
        steps:
            - uses: actions/checkout@v4
            
            - name: Run OWASP Dependency Check (Backend)
              uses: dependency-check/Dependency-Check_Action@main
              with:
                project: 'backend'
                path: './backend'
                format: 'HTML'
                out: 'reports/backend'
                
            - name: Upload OWASP Report (Backend)
              uses: actions/upload-artifact@v4
              with:
                name: dependency-check-report-backend
                path: reports/backend


    # ----------------- DEPLOY -----------------
    deploy:
        if: github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        environment: development

        steps:
            # 1. Checkout repository
            - name: Checkout repo
              uses: actions/checkout@v4
            
            # ----- BACKEND -----
            - name: Create backend application.yml
              run: echo "${{ secrets.BACKEND_APP_YML }}" > backend/application.yml
            
            - name: Build backend Docker image
              run: docker build -t backend:latest ./backend
            
            # ----- FRONTEND -----
            - name: Create frontend .env from secret
              run: echo "${{ secrets.FRONTEND_ENV_FILE }}" > frontend/.env
            
            - name: Build frontend Docker image
              run: docker build -t frontend:latest ./frontend
            
            # ----- Save Docker images -----
            - name: Save Docker images
              run: |
                mkdir -p docker-images
                docker save frontend:latest -o docker-images/frontend.tar
                docker save backend:latest -o docker-images/backend.tar
            
            # ----- Copy Docker images + docker-compose.yml to EC2 -----
            - name: Copy Docker images via SCP
              uses: appleboy/scp-action@master
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ubuntu
                port: 22
                key: ${{ secrets.EC2_SSH_KEY }}
                source: "docker-images/frontend.tar,docker-images/backend.tar"
                target: "/home/ubuntu/TutorLink/"
            
            # ----- Deploy containers on EC2 -----
            - name: Deploy Docker images on EC2
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ubuntu
                key: ${{ secrets.EC2_SSH_KEY }}
                script: |
                  cd /home/ubuntu/TutorLink/docker-images
                  sudo docker load -i frontend.tar
                  sudo docker load -i backend.tar
                  cd /home/ubuntu/TutorLink
                  sudo docker compose down
                  sudo docker compose up -d
            