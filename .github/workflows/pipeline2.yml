name: DAST Scan

on:
  workflow_dispatch: # manual trigger
  workflow_run:
    workflows: ["Deploy Pipeline"]
    types:
      - completed

jobs:
  dast:
    name: DAST Scan - OWASP ZAP
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Debug secret
        run: |
          if [ -z "${{ secrets.STAGING_URL }}" ]; then
            echo "STAGING_URL is empty"
            exit 1
          else
            echo "STAGING_URL is set"
          fi

      - name: Test connectivity
        run: curl -I ${{ secrets.STAGING_URL }}

      - name: Run OWASP ZAP baseline scan
        run: |
          docker run --user root --rm \
            -v $(pwd):/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t "${{ secrets.STAGING_URL }}" \
            -r zap-report.html \
            -d || true

      - name: Upload HTML report artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-html-report
          path: zap-report.html

  ai-implementation:
    name: AI Implementation
    runs-on: ubuntu-latest
    needs: dast
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download ZAP report artifacts
        uses: actions/download-artifact@v4
        with:
          name: zap-html-report
          path: ./reports

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai html2text

      - name: Analyze ZAP Report with Gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python - <<END
          import os
          import html2text
          import google.genai

          # Set Gemini API key
          os.environ["GOOGLE_API_KEY"] = os.environ["GEMINI_API_KEY"]

          REPORT_FILE = "./reports/zap-report.html"

          # Ensure report exists
          if not os.path.isfile(REPORT_FILE):
              print("ZAP report not found!")
              exit(1)

          # Convert HTML to plain text
          with open(REPORT_FILE, "r", encoding="utf-8") as f:
              html_content = f.read()

          report_text = html2text.html2text(html_content)

          # Initialize Gemini client
          client = google.genai.Client()

          # Generate AI summary
          response = client.models.generate_content(
              model="gemini-2.5-flash",
              contents=f"Summarize the following ZAP scan report and highlight key warnings and potential risks:\n\n{report_text}",
          )

          # Print AI summary
          print("===== Gemini-Infused ZAP Analysis =====")
          print(response.text)
          END

      - name: Post Gemini summary to PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = `${{ steps.gemini_summary.outputs.summary }}`
            // Format summary with collapsible section
            const commentBody = `
            ### ðŸ¤– Gemini AI ZAP Analysis Summary

            <details>
            <summary>Click to expand AI-generated summary</summary>

            \`\`\`
            ${summary}
            \`\`\`

            </details>
            `
                  const pr_number = context.payload.pull_request?.number
                  if (pr_number) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: pr_number,
                      body: commentBody
                    })
                  } else {
                    console.log("No pull request detected, skipping comment.")
                  }
