name: Post-Deployment Pipeline

on:
  workflow_dispatch: # manual trigger
  workflow_run:
    workflows: ["Deploy Pipeline"]
    types:
      - completed

jobs:
  dast:
    name: DAST Scan - OWASP ZAP
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: development
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Debug secret
        run: |
          if [ -z "${{ secrets.STAGING_URL }}" ]; then
            echo "STAGING_URL is empty"
            exit 1
          else
            echo "STAGING_URL is set"
          fi

      - name: Test connectivity
        run: curl -I ${{ secrets.STAGING_URL }}

      - name: Run OWASP ZAP baseline scan
        run: |
          docker run --user root --rm \
            -v $(pwd):/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t "${{ secrets.STAGING_URL }}" \
            -r zap-report.html \
            -d || true

      - name: Upload HTML report artifact
        uses: actions/upload-artifact@v4
        with:
          name: zap-html-report
          path: zap-report.html

  ai-implementation:
    name: AI Implementation
    runs-on: ubuntu-latest
    environment: development
    needs: dast
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download ZAP report artifacts
        uses: actions/download-artifact@v4
        with:
          name: zap-html-report
          path: ./reports

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai html2text

      - name: Analyze ZAP Report with Gemini
        id: gemini
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python - <<'END'
          import os, html2text, google.genai

          # Set Gemini API key
          os.environ["GOOGLE_API_KEY"] = os.environ["GEMINI_API_KEY"]

          REPORT_FILE = "./reports/zap-report.html"

          if not os.path.isfile(REPORT_FILE):
              print("ZAP report not found!")
              exit(1)

          html_content = open(REPORT_FILE, encoding="utf-8").read()
          report_text = html2text.html2text(html_content)

          client = google.genai.Client()
          response = client.models.generate_content(
              model="gemini-2.5-flash",
              contents=f"Summarize the following ZAP scan report and highlight key warnings and potential risks:\n\n{report_text}",
          )

          summary = response.text.strip()
          print("===== Gemini-Infused ZAP Analysis =====")
          print(summary)

          # Save summary for later steps
          with open("gemini_summary.txt", "w", encoding="utf-8") as f:
              f.write(summary)
          END

      - name: Export Gemini summary
        run: echo "GEMINI_SUMMARY<<EOF" >> $GITHUB_ENV && cat gemini_summary.txt >> $GITHUB_ENV && echo "EOF" >> $GITHUB_ENV

      - name: Post Gemini summary as commit comment
        uses: actions/github-script@v7
        env:
          COMMIT_SHA: ${{ github.event.workflow_run.head_sha || github.sha }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commitSha = process.env.COMMIT_SHA
            const summary = process.env.GEMINI_SUMMARY || "No AI summary available."

            const commentBody = `
            ### ü§ñ Gemini AI ZAP Analysis Summary (Commit)

            <details>
            <summary>Click to expand AI-generated summary</summary>

            \`\`\`
            ${summary}
            \`\`\`

            </details>
            `

            if (!commitSha) {
              console.log("‚ö†Ô∏è No commit SHA found ‚Äî skipping comment.")
              return
            }

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: commitSha,
              body: commentBody
            })

            console.log(`‚úÖ Gemini summary posted to commit ${commitSha}`)
