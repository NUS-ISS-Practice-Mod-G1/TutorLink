name: Deploy Pipeline

on:
  workflow_dispatch: # manual trigger
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed

jobs:
  # ----------------- DEPLOY -----------------
  deploy:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (
        github.event.workflow_run.conclusion == 'success' &&
        github.event.workflow_run.head_repository.full_name == github.repository
      )
    runs-on: ubuntu-latest
    environment: development

    steps:
      # 1. Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # --- Check if changes are in frontend or backend ---
      - name: Check modified paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

      # --- Stop if no relevant changes ---
      - name: Stop if not frontend/backend
        if: ${{ steps.changes.outputs.frontend != 'true' && steps.changes.outputs.backend != 'true' }}
        run: |
          echo "No changes detected in frontend or backend â€” skipping deployment."
          exit 0

      # ----- BACKEND -----
      - name: Create backend application.yml
        if: ${{ steps.changes.outputs.backend == 'true' }}
        run: echo "${{ secrets.BACKEND_APP_YML }}" > backend/application.yml

      - name: Build backend Docker image
        if: ${{ steps.changes.outputs.backend == 'true' }}
        run: docker build -t backend:latest ./backend

      # ----- FRONTEND -----
      - name: Create frontend .env from secret
        if: ${{ steps.changes.outputs.frontend == 'true' }}
        run: echo "${{ secrets.FRONTEND_ENV_FILE }}" > frontend/.env

      - name: Build frontend Docker image
        if: ${{ steps.changes.outputs.frontend == 'true' }}
        run: docker build -t frontend:latest ./frontend

      # ----- Save Docker images -----
      - name: Save Docker images
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        run: |
          mkdir -p docker-images
          if [ "${{ steps.changes.outputs.frontend }}" == "true" ]; then
            docker save frontend:latest -o docker-images/frontend.tar
          fi
          if [ "${{ steps.changes.outputs.backend }}" == "true" ]; then
            docker save backend:latest -o docker-images/backend.tar
          fi

      # ----- Copy Docker images + docker-compose.yml to EC2 -----
      - name: Copy Docker images via SCP
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          port: 22
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-images/frontend.tar,docker-images/backend.tar"
          target: "/home/ubuntu/TutorLink/"

      # ----- Deploy containers on EC2 -----
      - name: Deploy Docker images on EC2
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/TutorLink/docker-images
            sudo docker load -i frontend.tar
            sudo docker load -i backend.tar
            cd /home/ubuntu/TutorLink
            sudo docker compose down
            sudo docker compose up -d
