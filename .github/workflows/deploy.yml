name: Deploy Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch: # manual trigger allowed

jobs:
  # ----------------- DEPLOY -----------------
  deploy:
    runs-on: ubuntu-latest
    environment: development

    steps:
      # Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # Figure out which SHAs to compare
      - name: Determine base and head commits
        id: sha
        shell: bash
        run: |
          if [ -n "${{ github.event.workflow_run.pull_requests[0].base.sha }}" ]; then
            echo "Detected PR trigger âœ…"
            echo "base_sha=${{ github.event.workflow_run.pull_requests[0].base.sha }}" >> $GITHUB_OUTPUT
          else
            echo "Detected Push trigger ðŸš€"
            # For push: use previous commit on same branch
            git fetch origin ${{ github.event.workflow_run.head_branch }} --depth=2
            BASE_SHA=$(git rev-list ${{ github.event.workflow_run.head_sha }}^ -n 1)
            echo "base_sha=$BASE_SHA" >> $GITHUB_OUTPUT
          fi

          echo "head_sha=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_OUTPUT

      # Fetch the head commit if needed
      - name: Fetch head commit
        run: |
          git fetch origin ${{ steps.sha.outputs.head_sha }} --depth=1    

      # Check if changes are in frontend or backend
      - name: Check modified paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          base: ${{ steps.sha.outputs.base_sha }}
          ref: ${{ steps.sha.outputs.head_sha }}
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

      # Debug info 
      - name: Show detected changes
        run: |
          echo "Base SHA: ${{ steps.sha.outputs.base_sha }}"
          echo "Head SHA: ${{ steps.sha.outputs.head_sha }}"
          echo "Frontend changed: ${{ steps.changes.outputs.frontend }}"
          echo "Backend changed: ${{ steps.changes.outputs.backend }}"

      # --- Stop if no relevant changes ---
      - name: Stop if not frontend/backend
        if: ${{ steps.changes.outputs.frontend != 'true' && steps.changes.outputs.backend != 'true' }}
        run: |
          echo "No changes detected in frontend or backend â€” skipping deployment."
          exit 0

      # ----- BACKEND -----
      - name: Create backend application.yml
        if: ${{ steps.changes.outputs.backend == 'true' }}
        run: echo "${{ secrets.BACKEND_APP_YML }}" > backend/application.yml

      - name: Build backend Docker image
        if: ${{ steps.changes.outputs.backend == 'true' }}
        run: docker build -t backend:latest ./backend

      # ----- FRONTEND -----
      - name: Create frontend .env from secret
        if: ${{ steps.changes.outputs.frontend == 'true' }}
        run: echo "${{ secrets.FRONTEND_ENV_FILE }}" > frontend/.env

      - name: Build frontend Docker image
        if: ${{ steps.changes.outputs.frontend == 'true' }}
        run: docker build -t frontend:latest ./frontend

      # ----- Save Docker images -----
      - name: Save Docker images
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        run: |
          mkdir -p docker-images
          if [ "${{ steps.changes.outputs.frontend }}" == "true" ]; then
            docker save frontend:latest -o docker-images/frontend.tar
          fi
          if [ "${{ steps.changes.outputs.backend }}" == "true" ]; then
            docker save backend:latest -o docker-images/backend.tar
          fi

      # ----- Copy Docker images + docker-compose.yml to EC2 -----
      - name: Copy Docker images via SCP
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          port: 22
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-images/frontend.tar,docker-images/backend.tar"
          target: "/home/ubuntu/TutorLink/"

      # ----- Deploy containers on EC2 -----
      - name: Deploy Docker images on EC2
        if: ${{ steps.changes.outputs.frontend == 'true' || steps.changes.outputs.backend == 'true' }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/TutorLink/docker-images
            sudo docker load -i frontend.tar
            sudo docker load -i backend.tar
            cd /home/ubuntu/TutorLink
            sudo docker compose down
            sudo docker compose up -d
