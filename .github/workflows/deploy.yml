name: Build & Deploy Docker Images to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: development

    steps:
    # 1. Checkout repo
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Build Docker images
    - name: Build backend image
      run: docker build -t backend:latest ./backend

    - name: Build frontend image
      run: docker build -t frontend:latest ./frontend

    # 3. Save images as tar files
    - name: Save Docker images
      run: |
        mkdir -p docker-images
        docker save backend:latest -o docker-images/backend.tar
        docker save frontend:latest -o docker-images/frontend.tar
        chmod 644 docker-images/backend.tar docker-images/frontend.tar
        ls -l docker-images/
        ls -l docker-compose.yml

    # 4. Write SSH key from secret to file
    - name: Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

    # 5. Copy files to EC2 using plain scp
    - name: Copy Docker images and docker-compose.yml to EC2
      run: |
        scp -i ~/.ssh/id_rsa \
          docker-images/backend.tar \
          docker-images/frontend.tar \
          docker-compose.yml \
          ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app/

    # 6. SSH to EC2 and deploy
    - name: Deploy Docker images on EC2
      run: |
        ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
          mkdir -p ~/app/docker-images
          mv ~/app/backend.tar ~/app/docker-images/
          mv ~/app/frontend.tar ~/app/docker-images/
          cd ~/app/docker-images
          docker load -i backend.tar
          docker load -i frontend.tar
          cd ~/app
          docker compose down
          docker compose up -d
        EOF
