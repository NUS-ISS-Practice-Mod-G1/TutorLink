name: Build & Deploy Docker Images to EC2

on:
  workflow_dispatch:       # manual trigger
  workflow_run:
    workflows:
      - Frontend Pipeline
      - Backend Pipeline
    types:
      - completed

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repository
      - name: Checkout repo
        uses: actions/checkout@v4

      # ----- BACKEND -----
      - name: Create backend application.yml from secret
        run: |
          mkdir -p backend/src/main/resources
          echo "${{ secrets.BACKEND_APP_YML }}" > backend/src/main/resources/application.yml

      - name: Build backend Docker image
        run: docker build -t backend:latest ./backend

      # ----- FRONTEND -----
      - name: Create frontend .env from secret
        run: echo "${{ secrets.FRONTEND_ENV_FILE }}" > frontend/.env

      - name: Build frontend Docker image
        run: docker build -t frontend:latest ./frontend

      # ----- Save Docker images -----
      - name: Save Docker images
        run: |
          mkdir -p docker-images
          docker save frontend:latest -o docker-images/frontend.tar
          docker save backend:latest -o docker-images/backend.tar

      # ----- Copy Docker images + docker-compose.yml to EC2 -----
      - name: Copy Docker images via SCP
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          port: 22
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-images/frontend.tar,docker-images/backend.tar"
          target: "/home/ubuntu/TutorLink/"

      # ----- Deploy containers on EC2 -----
      - name: Deploy Docker images on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/TutorLink/docker-images
            sudo docker load -i frontend.tar
            sudo docker load -i backend.tar
            cd /home/ubuntu/TutorLink
            sudo docker compose down
            sudo docker compose up -d
